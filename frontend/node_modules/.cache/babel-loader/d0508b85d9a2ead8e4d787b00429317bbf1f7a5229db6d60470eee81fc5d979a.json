{"ast":null,"code":"import { BaseSource } from \"../BaseSource.js\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.BaseSource}\n * @description Defines how to manipulate an image layer\n * <div class=\"panel panel-warning\">\n *   <div class=\"panel-heading\">Notice</div>\n *   <div class=\"panel-body\">\n *     This class is used as a Qualifier for the asset.overlay() and asset.underlay() methods.</br>\n *     You can find regular images and videos transformations below:\n *   </div>\n *   <ul>\n *     <li>{@link SDK.ImageTransformation| Image Transformations}</li>\n *     <li>{@link SDK.VideoTransformation| Video Transformations}\n *   </ul>\n * </div>\n */\nclass ImageSource extends BaseSource {\n  constructor(publicID) {\n    super();\n    this._publicID = publicID;\n    this._qualifierModel = {\n      publicId: publicID,\n      sourceType: 'image'\n    };\n  }\n  /**\n   * @description\n   * Returns the opening string of the layer,\n   * This method is used internally within {@link SDK.LayerAction|LayerAction}\n   * @returns {string}\n   */\n  getOpenSourceString(layerType) {\n    const encodedPublicID = this.encodeAssetPublicID(this._publicID);\n    if (this._format) {\n      return \"\".concat(layerType, \"_\").concat(encodedPublicID, \".\").concat(this._format.toString());\n    } else {\n      return \"\".concat(layerType, \"_\").concat(encodedPublicID);\n    }\n  }\n  /**\n   * @description\n   * Apply a format for the image source of the layer\n   * @param {FormatQualifier} format A to apply to the layered image, see more {@link Qualifiers.Format|here}\n   * @returns {this}\n   */\n  format(format) {\n    this._format = format;\n    return this;\n  }\n  toJson() {\n    const result = super.toJson();\n    if (result.publicId && this._format) {\n      result.publicId = \"\".concat(result.publicId, \".\").concat(this._format.toString());\n    }\n    return result;\n  }\n  static fromJson(qualifierModel, transformationFromJson) {\n    const {\n      publicId,\n      transformation\n    } = qualifierModel;\n    // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [qualifierModel])\n    // This allows the inheriting classes to determine the class to be created\n    // @ts-ignore\n    const result = new this(publicId);\n    if (transformation) {\n      result.transformation(transformationFromJson(transformation));\n    }\n    return result;\n  }\n}\nexport { ImageSource };","map":{"version":3,"names":["BaseSource","ImageSource","constructor","publicID","_publicID","_qualifierModel","publicId","sourceType","getOpenSourceString","layerType","encodedPublicID","encodeAssetPublicID","_format","concat","toString","format","toJson","result","fromJson","qualifierModel","transformationFromJson","transformation"],"sources":["C:/Users/lcyke/OneDrive/Masaüstü/NereyeApp/frontend/node_modules/@cloudinary/transformation-builder-sdk/qualifiers/source/sourceTypes/ImageSource.js"],"sourcesContent":["import { BaseSource } from \"../BaseSource.js\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.BaseSource}\n * @description Defines how to manipulate an image layer\n * <div class=\"panel panel-warning\">\n *   <div class=\"panel-heading\">Notice</div>\n *   <div class=\"panel-body\">\n *     This class is used as a Qualifier for the asset.overlay() and asset.underlay() methods.</br>\n *     You can find regular images and videos transformations below:\n *   </div>\n *   <ul>\n *     <li>{@link SDK.ImageTransformation| Image Transformations}</li>\n *     <li>{@link SDK.VideoTransformation| Video Transformations}\n *   </ul>\n * </div>\n */\nclass ImageSource extends BaseSource {\n    constructor(publicID) {\n        super();\n        this._publicID = publicID;\n        this._qualifierModel = {\n            publicId: publicID,\n            sourceType: 'image'\n        };\n    }\n    /**\n     * @description\n     * Returns the opening string of the layer,\n     * This method is used internally within {@link SDK.LayerAction|LayerAction}\n     * @returns {string}\n     */\n    getOpenSourceString(layerType) {\n        const encodedPublicID = this.encodeAssetPublicID(this._publicID);\n        if (this._format) {\n            return `${layerType}_${encodedPublicID}.${this._format.toString()}`;\n        }\n        else {\n            return `${layerType}_${encodedPublicID}`;\n        }\n    }\n    /**\n     * @description\n     * Apply a format for the image source of the layer\n     * @param {FormatQualifier} format A to apply to the layered image, see more {@link Qualifiers.Format|here}\n     * @returns {this}\n     */\n    format(format) {\n        this._format = format;\n        return this;\n    }\n    toJson() {\n        const result = super.toJson();\n        if (result.publicId && this._format) {\n            result.publicId = `${result.publicId}.${this._format.toString()}`;\n        }\n        return result;\n    }\n    static fromJson(qualifierModel, transformationFromJson) {\n        const { publicId, transformation } = qualifierModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [qualifierModel])\n        // This allows the inheriting classes to determine the class to be created\n        // @ts-ignore\n        const result = new this(publicId);\n        if (transformation) {\n            result.transformation(transformationFromJson(transformation));\n        }\n        return result;\n    }\n}\nexport { ImageSource };\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,SAASD,UAAU,CAAC;EACjCE,WAAWA,CAACC,QAAQ,EAAE;IAClB,KAAK,CAAC,CAAC;IACP,IAAI,CAACC,SAAS,GAAGD,QAAQ;IACzB,IAAI,CAACE,eAAe,GAAG;MACnBC,QAAQ,EAAEH,QAAQ;MAClBI,UAAU,EAAE;IAChB,CAAC;EACL;EACA;AACJ;AACA;AACA;AACA;AACA;EACIC,mBAAmBA,CAACC,SAAS,EAAE;IAC3B,MAAMC,eAAe,GAAG,IAAI,CAACC,mBAAmB,CAAC,IAAI,CAACP,SAAS,CAAC;IAChE,IAAI,IAAI,CAACQ,OAAO,EAAE;MACd,UAAAC,MAAA,CAAUJ,SAAS,OAAAI,MAAA,CAAIH,eAAe,OAAAG,MAAA,CAAI,IAAI,CAACD,OAAO,CAACE,QAAQ,CAAC,CAAC;IACrE,CAAC,MACI;MACD,UAAAD,MAAA,CAAUJ,SAAS,OAAAI,MAAA,CAAIH,eAAe;IAC1C;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;EACIK,MAAMA,CAACA,MAAM,EAAE;IACX,IAAI,CAACH,OAAO,GAAGG,MAAM;IACrB,OAAO,IAAI;EACf;EACAC,MAAMA,CAAA,EAAG;IACL,MAAMC,MAAM,GAAG,KAAK,CAACD,MAAM,CAAC,CAAC;IAC7B,IAAIC,MAAM,CAACX,QAAQ,IAAI,IAAI,CAACM,OAAO,EAAE;MACjCK,MAAM,CAACX,QAAQ,MAAAO,MAAA,CAAMI,MAAM,CAACX,QAAQ,OAAAO,MAAA,CAAI,IAAI,CAACD,OAAO,CAACE,QAAQ,CAAC,CAAC,CAAE;IACrE;IACA,OAAOG,MAAM;EACjB;EACA,OAAOC,QAAQA,CAACC,cAAc,EAAEC,sBAAsB,EAAE;IACpD,MAAM;MAAEd,QAAQ;MAAEe;IAAe,CAAC,GAAGF,cAAc;IACnD;IACA;IACA;IACA,MAAMF,MAAM,GAAG,IAAI,IAAI,CAACX,QAAQ,CAAC;IACjC,IAAIe,cAAc,EAAE;MAChBJ,MAAM,CAACI,cAAc,CAACD,sBAAsB,CAACC,cAAc,CAAC,CAAC;IACjE;IACA,OAAOJ,MAAM;EACjB;AACJ;AACA,SAAShB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}