{"ast":null,"code":"import { Cloudinary } from '@cloudinary/url-gen';\nconst cld = new Cloudinary({\n  cloud: {\n    cloudName: 'dqtkblhwr'\n  }\n});\nexport const uploadImage = async file => {\n  try {\n    // Dosya türü kontrolü\n    if (!file || !file.type.startsWith('image/')) {\n      throw new Error('Geçerli bir resim dosyası seçin');\n    }\n    const maxSize = 5 * 1024 * 1024; // 5MB\n    if (file.size > maxSize) {\n      throw new Error('Dosya boyutu 5MB\\'dan küçük olmalıdır');\n    }\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('upload_preset', 'Nereye'); // Cloudinary dashboard'unda bulunan preset adı\n    // Cloudinary'ye yükle\n    const response = await fetch(`https://api.cloudinary.com/v1_1/dqtkblhwr/image/upload`, {\n      method: 'POST',\n      body: formData\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      console.error('Cloudinary error details:', errorData);\n\n      // Daha detaylı hata mesajları\n      if (response.status === 400) {\n        throw new Error('Geçersiz dosya formatı veya boyutu');\n      } else if (response.status === 401) {\n        throw new Error('Cloudinary kimlik doğrulama hatası - upload_preset kontrol edin');\n      } else if (response.status === 413) {\n        throw new Error('Dosya boyutu çok büyük');\n      } else {\n        throw new Error(`Resim yükleme başarısız: ${response.status} ${response.statusText}`);\n      }\n    }\n    const data = await response.json();\n    console.log('Upload successful:', data);\n\n    // Sadece URL'yi döndür (React component'inde kullanım için)\n    return data.secure_url;\n  } catch (error) {\n    console.error('Cloudinary yükleme hatası:', error);\n    throw error;\n  }\n};\n\n// Tüm resim bilgilerini almak için ayrı fonksiyon\nexport const uploadImageWithDetails = async file => {\n  try {\n    // Dosya türü kontrolü\n    if (!file || !file.type.startsWith('image/')) {\n      throw new Error('Geçerli bir resim dosyası seçin');\n    }\n\n    // Dosya boyutu kontrolü (5MB limit)\n    const maxSize = 5 * 1024 * 1024; // 5MB\n    if (file.size > maxSize) {\n      throw new Error('Dosya boyutu 5MB\\'dan küçük olmalıdır');\n    }\n\n    // FormData oluştur\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('upload_preset', 'Nereye');\n\n    // Cloudinary'ye yükle\n    const response = await fetch(`https://api.cloudinary.com/v1_1/dqtkblhwr/image/upload`, {\n      method: 'POST',\n      body: formData\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      console.error('Cloudinary error details:', errorData);\n      throw new Error(`Resim yükleme başarısız: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log('Upload successful with details:', data);\n\n    // Tüm bilgileri döndür\n    return {\n      secure_url: data.secure_url,\n      public_id: data.public_id,\n      width: data.width,\n      height: data.height,\n      format: data.format,\n      bytes: data.bytes\n    };\n  } catch (error) {\n    console.error('Cloudinary yükleme hatası:', error);\n    throw error;\n  }\n};\n\n// Resim URL'ini optimize etmek için yardımcı fonksiyon\nexport const getOptimizedImageUrl = (publicId, options = {}) => {\n  const defaultOptions = {\n    fetch_format: 'auto',\n    quality: 'auto',\n    ...options\n  };\n  return cld.image(publicId).toURL(defaultOptions);\n};\n\n// Resmi kırpmak için yardımcı fonksiyon\nexport const getCroppedImageUrl = (publicId, width = 500, height = 500) => {\n  return cld.image(publicId).resize('fill', width, height).toURL();\n};\nexport default cld;","map":{"version":3,"names":["Cloudinary","cld","cloud","cloudName","uploadImage","file","type","startsWith","Error","maxSize","size","formData","FormData","append","response","fetch","method","body","ok","errorData","json","console","error","status","statusText","data","log","secure_url","uploadImageWithDetails","public_id","width","height","format","bytes","getOptimizedImageUrl","publicId","options","defaultOptions","fetch_format","quality","image","toURL","getCroppedImageUrl","resize"],"sources":["C:/Users/lcyke/OneDrive/Masaüstü/NereyeApp/frontend/src/services/cloudinary.js"],"sourcesContent":["import { Cloudinary } from '@cloudinary/url-gen';\r\n\r\nconst cld = new Cloudinary({\r\n  cloud: {\r\n    cloudName: 'dqtkblhwr' \r\n  }\r\n});\r\n\r\nexport const uploadImage = async (file) => {\r\n  try {\r\n    // Dosya türü kontrolü\r\n    if (!file || !file.type.startsWith('image/')) {\r\n      throw new Error('Geçerli bir resim dosyası seçin');\r\n    }\r\n\r\n \r\n    const maxSize = 5 * 1024 * 1024; // 5MB\r\n    if (file.size > maxSize) {\r\n      throw new Error('Dosya boyutu 5MB\\'dan küçük olmalıdır');\r\n    }\r\n\r\n    \r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    \r\n    formData.append('upload_preset', 'Nereye'); // Cloudinary dashboard'unda bulunan preset adı\r\n   // Cloudinary'ye yükle\r\n    const response = await fetch(\r\n      `https://api.cloudinary.com/v1_1/dqtkblhwr/image/upload`,\r\n      {\r\n        method: 'POST',\r\n        body: formData\r\n      }\r\n    );\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      console.error('Cloudinary error details:', errorData);\r\n      \r\n      // Daha detaylı hata mesajları\r\n      if (response.status === 400) {\r\n        throw new Error('Geçersiz dosya formatı veya boyutu');\r\n      } else if (response.status === 401) {\r\n        throw new Error('Cloudinary kimlik doğrulama hatası - upload_preset kontrol edin');\r\n      } else if (response.status === 413) {\r\n        throw new Error('Dosya boyutu çok büyük');\r\n      } else {\r\n        throw new Error(`Resim yükleme başarısız: ${response.status} ${response.statusText}`);\r\n      }\r\n    }\r\n\r\n    const data = await response.json();\r\n    console.log('Upload successful:', data);\r\n    \r\n    // Sadece URL'yi döndür (React component'inde kullanım için)\r\n    return data.secure_url;\r\n    \r\n  } catch (error) {\r\n    console.error('Cloudinary yükleme hatası:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Tüm resim bilgilerini almak için ayrı fonksiyon\r\nexport const uploadImageWithDetails = async (file) => {\r\n  try {\r\n    // Dosya türü kontrolü\r\n    if (!file || !file.type.startsWith('image/')) {\r\n      throw new Error('Geçerli bir resim dosyası seçin');\r\n    }\r\n\r\n    // Dosya boyutu kontrolü (5MB limit)\r\n    const maxSize = 5 * 1024 * 1024; // 5MB\r\n    if (file.size > maxSize) {\r\n      throw new Error('Dosya boyutu 5MB\\'dan küçük olmalıdır');\r\n    }\r\n\r\n    // FormData oluştur\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    formData.append('upload_preset', 'Nereye');\r\n\r\n    // Cloudinary'ye yükle\r\n    const response = await fetch(\r\n      `https://api.cloudinary.com/v1_1/dqtkblhwr/image/upload`,\r\n      {\r\n        method: 'POST',\r\n        body: formData\r\n      }\r\n    );\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      console.error('Cloudinary error details:', errorData);\r\n      throw new Error(`Resim yükleme başarısız: ${response.status}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    console.log('Upload successful with details:', data);\r\n    \r\n    // Tüm bilgileri döndür\r\n    return {\r\n      secure_url: data.secure_url,\r\n      public_id: data.public_id,\r\n      width: data.width,\r\n      height: data.height,\r\n      format: data.format,\r\n      bytes: data.bytes\r\n    };\r\n    \r\n  } catch (error) {\r\n    console.error('Cloudinary yükleme hatası:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Resim URL'ini optimize etmek için yardımcı fonksiyon\r\nexport const getOptimizedImageUrl = (publicId, options = {}) => {\r\n  const defaultOptions = {\r\n    fetch_format: 'auto',\r\n    quality: 'auto',\r\n    ...options\r\n  };\r\n  \r\n  return cld.image(publicId).toURL(defaultOptions);\r\n};\r\n\r\n// Resmi kırpmak için yardımcı fonksiyon\r\nexport const getCroppedImageUrl = (publicId, width = 500, height = 500) => {\r\n  return cld.image(publicId)\r\n    .resize('fill', width, height)\r\n    .toURL();\r\n};\r\n\r\nexport default cld; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}